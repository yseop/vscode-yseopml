{
    "Granule": {
        "prefix": "granule",
        "body": [
            "\\(",
            "\t$0",
            "\\)"
        ],
        "description": "Text granule"
    },
    "Field": {
        "prefix": "field",
        "body": [
            "field ${1:attribute_name}",
            "\t--> ${2:option_name} ${3:option_value}"
        ],
        "description": "Yml class attribute"
    },
    "Instance": {
        "prefix": "instance",
        "body": [
            "${1:instance_type} ${2:instance_name}",
            "\t--> ${3:option_name} ${4:option_value}",
            "\t$0",
            ";"
        ],
        "description": "Object instance"
    },
    "Interface": {
        "prefix": "interface",
        "body": [
            "interface ${1:${TM_FILENAME_BASE/ /_/g}}",
            "\tfield ${2:field_name}",
            "\t\t--> domains ${3|Boolean,Decimal,Integer,Number,Collection,Text,Object|}",
            "\t",
            "\tclassProperties",
            "\t$0",
            "; // $1"
        ],
        "description": "Interface"
    },
    "Textualization Attribute": {
        "prefix": "textu",
        "body": [
            "--> dsl -> Textualization",
            "\t--> language ${1|LANG_fr,LANG_en|}",
            "\t--> root \"${2:root_string}\"",
            "\t--> number ${3|SINGULAR,PLURAL|}",
            "\t--> gender ${4|FEMININE,MASCULINE|}",
            "\t--> hasDeterminer ${5|true,false|}",
            ";",
            "$0"
        ],
        "description": "Textualization attribute"
    },
    "Noun Phrase": {
        "prefix": "\\nounPhrase",
        "body": "\\nounPhrase(\"${1:root}\", _NUMBER: ${2:number})",
        "description": "Noun phrase"
    },
    "Function": {
        "prefix": "function",
        "body": [
            "function ${1:func_name}(${2:args})",
            "--> domains ${3|Boolean,Decimal,Integer,Number,Collection,Text,Object,Void|}",
            "--> action",
            "{",
            "\t$0",
            "}",
            "; // $1"
        ],
        "description": "Function"
    },
    "Simple Function": {
        "prefix": "function",
        "body": [
            "function ${1:func_name}(${2:args})",
            "--> return",
            "\t$0",
            ";"
        ],
        "description": "Function with direct return"
    },
    "Text Function": {
        "prefix": "TextFunction",
        "body": [
            "TextFunction ${1:func_name}(${2:args})",
            "--> text",
            "\t\\(",
            "\t\t$0",
            "\t\\)",
            "; // $1"
        ],
        "description": "Text function"
    },
    "Verb": {
        "prefix": "\\verb",
        "body": "\\verb(VERB_${1|EN,FR,DE,ES,JA,NL,PT|}_${2:VERBNAME}, ${3|PRESENT_INDICATIVE,AUX_MOD,AUX_MOD_CONTINUOUS,AUX_MOD_PAST_PERFECT,AUX_MOD_PAST_PERFECT_CONTINUOUS,AUX_MOD_PERFECT,AUX_MOD_PERFECT_CONTINUOUS,AUX_MOD_PRETERIT,AUX_MOD_PRETERIT_CONTINUOUS,CONDITIONAL,CONJUNCTIVE_ROOT,CONTINUOUS_FUTURE,CONTINUOUS_FUTURE_PERFECT,CONTINUOUS_PAST_CONDITIONAL,CONTINUOUS_PAST_PERFECT,CONTINUOUS_PRESENT,CONTINUOUS_PRESENT_CONDITIONAL,CONTINUOUS_PRESENT_PERFECT,CONTINUOUS_PRETERIT,FUTURE,FUTURE_1_INDICATIVE,FUTURE_2_INDICATIVE,FUTURE_INDICATIVE,FUTURE_PERFECT,FUTURE_PERFECT_INDICATIVE,FUTURE_PERFECT_SUBJUNCTIVE,FUTURE_SUBJUNCTIVE,FUTURE_SUBJUNCTIVE_1,FUTURE_SUBJUNCTIVE_2,GERUNDIVE,IMPERATIVE,IMPERFECT_INDICATIVE,IMPERFECT_SUBJUNCTIVE,INACCOMPLISHED_ROOT,INFINITIVE,INFINITIVE_1,INFINITIVE_2,PARTICIPLE,PARTICIPLE_1,PARTICIPLE_2,PARTICIPLE_3,PAST,PAST_CONDITIONAL,PAST_CONDITIONAL_SECOND_FORM,PAST_GERUNDIVE,PAST_HISTORIC_INDICATIVE,PAST_IMPERATIVE,PAST_INFINITIVE,PAST_PARTICIPLE,PAST_PERFECT,PAST_PERFECT_INDICATIVE,PAST_SUBJUNCTIVE,PAST_SUBJUNCTIVE_1,PAST_SUBJUNCTIVE_2,PERFECT_INDICATIVE,PLU_PERFECT_INDICATIVE,PLU_PERFECT_SUBJUNCTIVE,POTENTIAL,PRESENT,PRESENT_CONDITIONAL,PRESENT_IMPERATIVE,PRESENT_INFINITIVE,PRESENT_OR_FUTURE,PRESENT_PARTICIPLE,PRESENT_PERFECT,PRESENT_PERFECT_INDICATIVE,PRESENT_SUBJONCTIVE_1,PRESENT_SUBJONCTIVE_2,PRESENT_SUBJUNCTIVE,PRETERIT,PRETERIT_INDICATIVE,TE_FORM,VOLITIONAL|}_$1, _SUBJECT_NUMBER: ${4:nb})",
        "description": "Verb"
    },
    "Synonyms": {
        "prefix": "\\beginSynonym",
        "body": [
            "\\beginSynonym",
            "\t\\choice",
            "\t\t${1:xxx}",
            "\t",
            "\t\\choice",
            "\t\t${2:yyy}",
            "\t$0",
            "\\endSynonym"
        ],
        "description": "List of alternatives"
    },
    "Synonyms (shorthand)": {
        "prefix": "synonyms",
        "body": [
            "\\beginSynonym",
            "\t\\choice",
            "\t\t${1:xxx}",
            "\t",
            "\t\\choice",
            "\t\t${2:yyy}",
            "\t$0",
            "\\endSynonym"
        ],
        "description": "List of alternatives"
    },
    "Synonym Choice": {
        "prefix": "\\choice",
        "body": [
            "\\choice",
            "\t$0"
        ],
        "description": "An alternative in a list of synonyms"
    },
    "Switch statement": {
        "prefix": "\\switch",
        "body": [
            "\\switch(${1:expr})",
            "\t\\case(${2:val_1})",
            "\t\t${3:code_1}",
            "\t",
            "\t\\case(${4:val_2})",
            "\t\t${5:code_2}",
            "\t",
            "\t\\case(${6:val_3})",
            "\t\t${7:code_3}",
            "\t$0",
            "\\endSwitch"
        ],
        "description": "Handle values differently"
    },
    "Switch case item": {
        "prefix": "\\case",
        "body": [
            "\\case(${1:val})",
            "\t$0"
        ],
        "description": "A case in a “switch” statement"
    },
    "Round": {
        "prefix": "round",
        "body": "round(${1:amount}, _DECIMALS: ${2|0,1,2,3,4,5,6,7,8,9|})",
        "description": "Number rounding"
    },
    "Amount": {
        "prefix": "\\amount",
        "body": "\\amount(${1:amount}, _DECIMALS_COUNT: ${2|2,1,0|})",
        "description": "Display amount"
    },
    "Not Empty String": {
        "prefix": "\\notEmptyString",
        "body": "\\notEmptyString",
        "description": "Make sure a string is not considered empty"
    },
    "End of Line": {
        "prefix": "\\endOfLine",
        "body": "\\endOfLine",
        "description": "Force end of line"
    },
    "No Contraction": {
        "prefix": "\\noContraction",
        "body": "\\noContraction",
        "description": "Prevent contraction"
    }
}