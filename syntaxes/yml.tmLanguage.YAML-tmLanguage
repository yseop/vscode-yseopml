$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: 'Yseop Markup Language'
scopeName: source.yseop
patterns:
    - { include: '#inlineInstance' }
    - { include: '#option' }
    - { include: '#preprocessing' }
    - { include: '#keywords' }
    - { include: '#documentationString' }
    - { include: '#strings' }
    - { include: '#granules' }
    - { include: '#constants' }
    - { include: '#comments' }
    - { include: '#operators' }
    - { include: '#method-calls' }
    - { include: '#function-calls' }

repository:
    tag:
        patterns:
            -
                begin: '(?x) \\ (beginAnnotation|beginBookmark|beginChooseSynonym|beginContentTest|forall|foreach|beginFormat|beginIndent|ifBaseLanguage_(de|en|es|fr|ja|nl)|ifLanguage_(de|en(_US|_GB)?|es|fr(_BE|_CA|_FR)?|ja|nl)|beginIndivisible|beginKeepTextAspect|link|beginList|beginNote|beginQuote|beginStyle|beginTimeCounter|beginTitleLevel|if|beginSynonym|while|switch)'
                beginCaptures:
                    '0': {name: keyword.control.tag.yseop}
                end: '(?x) \\ (endAnnotation|endBookmark|endChooseSynonym|endContentTest|endForall|endForeach|endFormat|endIndent|endIfBaseLanguage_(de|en|es|fr|ja|nl)|endIfLanguage_(de|en(_US|_GB)?|es|fr(_BE|_CA|_FR)?|ja|nl)|endIndivisible|endKeepTextAspect|endLink|endList|endNote|endQuote|endStyle|endTimeCounter|endTitleLevel|endIf|endSynonym|endWhile|endSwitch)'
                endCaptures:
                    '0': {name: keyword.control.tag.yseop}
                patterns:
                    - {match: '(?x) \\ (nextItem|default|case|else|choice)', name: keyword.control.tag.yseop}
                    - { include: '$self' }
                    - { include: '#tag' }
            -
                match: '(?x) \\ [\p{L}_\p{N}]+ (:[\p{L}_\p{N}]+)* (::[\p{L}_\p{N}]+)?'
                name: entity.name.function.tag.yseop
    keywords:
        patterns:
            -
                name: keyword.control.yseop
                match: \b(args|belongsTo|break|case|class|classProperties|complete|default|else|extends|field|for|foreach|function|Function|if|ifExpr|implementation|interface|local|method|override|private|return|static|switch|switchExpr|switchExprExclusive|then|while)\b
                comment: 'All YML keywords that should be highlighted.'
            - { include: '#comments' }
            - { include: '#constants' }
            - { include: '#operators' }
            - { include: '#strings' }
    option:
        patterns:
            -
                match: (?x) (-->|\+\+\+|---|==>) \s+ ([\p{L}_\p{N}]+) \s+
                captures:
                    '1': {name: keyword.operator.attribute.yseop}
                    '2': {name: entity.other.attribute-name}
                patterns:
                    - {include: '#inlineInstance'}
                    - {include: '$self'}

    inlineInstance:
        patterns:
            -
                begin: >
                    (?x)
                    (->) \s+ ([\p{L}_\p{N}]+)
                    (
                        \s+
                        ([\p{L}_\p{N}]+ (:[\p{L}_\p{N}]+)* (::[\p{L}_\p{N}]+)? )
                        \b
                    )?
                end: (?=;)\n*
                name: entity.other.yseop
                captures:
                    '1': {name: keyword.operator.instance.yseop}
                    '2': {name: entity.name.type.yseop}
                    '4': {name: variable.other.yseop}
                patterns:
                    - {include: '$self'}
    constants:
        patterns:
            -
                name: constant.other.date.yseop
                match: '''d:\d{4}-\d{2}-\d{2}'''
                comment: Dates
            -
                name: constant.numeric.decimal.yseop
                comment: 'A simple integer or a decimal number'
                match: (?x) \b -? \p{N}+ (\.\p{N}+)? \b
            -
                name: constant.language.yseop
                match: \b(true|false|null)\b
                comment: 'Pure constants.'
    preprocessing:
        patterns:
            -
                begin: '^\s*@'
                end: '\n'
                name: meta.preprocessor.yseop
        comment: 'Preprocessing stuff'

    documentationString:
        name: string.quoted.triple.yseop
        begin: '"""'
        end: '"""'
        patterns:
            -
                name: keyword.operator.param.yseop
                match: '@param|@return'
            -
                match: '`([^`]*)`'
                captures:
                    "1": {name: variable.parameter.yseop}


    strings:
        patterns:
            - { include: '#documentationString' }
            -
                name: string.quoted.double.yseop
                begin: '"'
                end: '"'
                patterns:
                    - { match: \\", name: constant.character.escape.yseop }

    granules:
        name: source.granule.yseop
        begin: \\\(
        end: \\\)
        patterns:
            - { include: '#keywords' }
            - { include: '#function-calls' }
            - { include: '#tag' }
            - { match: \\", name: constant.character.escape.yseop }
            - { include: '#strings' }
            - { include: '#constants' }
            - { include: '#comments' }
            - { include: '#operators' }
        comment: 'Text Granule blocks.'
    comments:
        patterns:
            -
                match: (//).*
                name: comment.line.double-slash.yseop
                comment: 'Single line comment.'
            -
                begin: /\*
                end: \*/
                name: comment.block.yseop
                comment: 'Multilines comments.'
    operators:
        patterns:
            -
                match: (>|>=|<|<=|==|!=|&&|\|\||==)
                name: keyword.operator.logical.yseop
                comment: 'Some of the operators that can be find in YML.'
            -
                match: (\+|-|/|mod|\*)
                name: keyword.operator.mathematics.yseop
                comment: 'Some of the operators that can be found in YML.'
    method-calls:
        begin: >
            (?x)
            (\.)
            ([\p{L}_\p{N}]+(::?[\p{L}_\p{N}]+)*)
            \s*
            (\()
        beginCaptures:
            '1': { name: punctuation.separator.period.yseop }
            '2': { name: entity.name.function.yseop }
            '4': { name: punctuation.definition.parameters.begin.bracket.round.yseop }
        end: \)
        endCaptures:
            '0': { name: punctuation.definition.parameters.end.bracket.round.yseop }
        name: meta.method-call.yseop
        patterns:
            - {include: '$self'}
    function-calls:
        begin: >
            (?x)
            # Keywords that have arguments and may be wrongfully found as functions.
            (?!\\?(case|for|foreach|if|ifExpr|switch|switchExpr|switchExprExclusive|while))
            (\\?[\p{L}_\p{N}]+(::?[\p{L}_\p{N}]+)*)
            \s*
            (\()
        beginCaptures:
            '2': { name: entity.name.function.yseop }
            '4': { name: punctuation.definition.parameters.begin.bracket.round.yseop }
        end: \)
        endCaptures:
            '0': { name: punctuation.definition.parameters.end.bracket.round.yseop }
        name: meta.function-call.yseop
        patterns:
            - {include: '$self'}
